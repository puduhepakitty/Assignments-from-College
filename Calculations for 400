#Import functions
from math import *
import numpy as np

#Put in the variables
m = 2 #mass
i = 0 #counter number
w = .5 #width
l = 8 #length
h = .5 #height
theta = pi/6
theta_i = .1
theta_ii = .01
rho = 1

#Put in matrix
I = np.array([[(m*(w**2+h**2))/12, 0, 0],
     [0, (m*(l**2+h**2))/12, 0],
     [0, 0, (m*(w**2+l**2))/12]])

p = np.array([[l/2],
     [0],
     [0]])

R = np.array([[cos(theta), -sin(theta), 0],
     [sin(theta), cos(theta), 0],
     [0, 0, 1]])

R = np.transpose(R, (1, 0, 2).shape)
print(R)

W = np.array([[0],
     [0],
     [0]])

Z = np.array([[0],
     [0],
     [1]])

#Initial conditions
avg_vel = (np.R((np.arange(3).reshape((1,3))) * W) + (theta * Z)

w_dot = (np.transpose(R) * W) + (R*W) * (theta_i * Z) + (theta_ii * Z)

v_dot = np.transpose(R)*(W*p+W*(W*p))

v_com = W * p + W * (W * p) + W

f_i = m*W

n_i = I * W + W * (I*W)

for_i = np.transpose(R) * W + f_i

t_i = n_i + np.transpose(R) * W + p * for_i + p * (np.transpose(R) * f_i)

tor_i = t_i * Z

i = 1

while(1):
    #Average Velocity
    for i in range(1,9):
        avg_vel = ((np.R((np.arange(3).reshape((1,3)))) * avg_vel) + (theta * Z)

        #Average acceleration
        w_dot = (np.transpose(R) * w_dot) + (R * avg_vel) * (theta_i * Z) + (theta_ii * Z)

        #Linear Acceleration
        v_dot = np.transponse(R) * (avg_vel * p + avg_vel * (avg_vel * p))

        #Linear Acceleration at COM
        v_com = w_dot * p + avg_vel * (avg_vel * p) + v_dot

        #Newton-Euler
        f_i = m * v_com

        #N
        n_i = I * w_dot + avg_vel * (I * avg_vel)

        #Force
        for_i = np.transpose(R) * for_i + f_i

        #Torque
        t_i = n_i + np.transpose(R) * n_i + p * for_i + p * (np.transpose(R) * f_i)

        #Joint Torque
        tor_i = t_i * Z
    
        i += 1
